<?php
/**
 * Created by PhpStorm.
 * User: enno
 * Date: 10.09.15
 * Time: 15:54
 */

namespace Drupal\grid_element_trash\Form;


use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;
use grid_db;

class ContainerForm extends ConfigFormBase
{
    protected function getEditableConfigNames()
    {
        return ['grid.trash'];
    }

    public function getFormId()
    {
        return 'grid_element_trash_container_trash';
    }

    public function buildForm(array $form, FormStateInterface $form_state)
    {
        /**
         * get the grid storage
         */
        /** @var grid_db $storage */
        $storage=grid_get_storage();

        /**
         * content_types that are activated for grid
         */
        /** @var String[] $content_types */
        $content_types= \Drupal::config("grid.settings")->get("enabled_node_types");
        $sidebar=\Drupal::config("grid.settings")->get("sidebar_content");
        $options = array();
        foreach ($content_types as $content_type) {
            if($content_type == $sidebar ) continue;
            $options[$content_type] = $content_type;
        }

        $form=array();

        $form['info']=array(
            '#type'=>'markup',
            '#markup'=>'<div><small>'.t('All checked Containers will be placed in Trash and won\'t be available in Grid anymore.').'</small></div>',
        );

        $container_form = array(
            '#type'=>'fieldset',
            '#collapsible' => true,
            '#collapsed' => true,
            '#title'=> t('Container Trash'),
        );

        /**
         * look for all meta type boxes
         * @var [type]
         */
        $container_types = $storage->fetchContainerTypes();
        $container_trash=$this->config("grid.trash")->get("trashed_containers");

        foreach ($container_types as $container)
        {
            $type = $container["type"];
            /**
             * only content containers and sidebars
             */
            if(strpos($type, "c-") !== 0 && strpos($type, "s-") !== 0) continue;
            $checked=array();
            if(isset($container_trash[$type]))
            {
                $checked=$container_trash[$type];
            }
            /**
             * add checkbox option for type
             */
            $container_form['grid_element_trash_container_'.$type.'_trashed']=array(
                '#type'=>'checkboxes',
                '#options' => $options,
                '#default_value'=>$checked,
                '#title'=>$type,
            );

        }

        $form['trash_container'] = $container_form;

        $reusable_form = array(
            '#type'=>'fieldset',
            '#collapsible' => true,
            '#collapsed' => true,
            '#title'=> t('Reusable Container Trash'),
        );

        $reused = $storage->getReusedContainerIds();
        $container_trash=$this->config("grid.trash")->get("trashed_reuse_containers");
        foreach ($reused as $reused_container_id) {
            /** @var grid_container $container */
            $container = $storage->loadReuseContainer($reused_container_id);
            /**
             * add checkbox option for reused container
             */
            $checked=array();
            if(isset($container_trash[$container->containerid]))
            {
                $checked=$container_trash[$container->containerid];
            }
            $reusable_form['grid_element_trash_container_reused_'.$container->containerid.'_trashed']=array(
                '#type'=>'checkboxes',
                '#options' => $options,
                '#default_value'=>$checked,
                '#title'=>$container->reusetitle,
            );
        }

        $form['trash_reusable_container'] = $reusable_form;

        return parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
    }

    public function submitForm(array &$form, FormStateInterface $form_state)
    {
        /** @var grid_db $storage */
        $storage=grid_get_storage();

        $container_types = $storage->fetchContainerTypes();
        $container_trash=$this->config("grid.trash")->get("trashed_containers");
        $container_reuse_trash=$this->config("grid.trash")->get("trashed_reuse_containers");

        foreach ($container_types as $container) {
            $type = $container["type"];
            $settings=$form_state->getValue('grid_element_trash_container_'.$type.'_trashed');
            $container_trash[$type]=$settings;
        }
        $reused = $storage->getReusedContainerIds();
        foreach ($reused as $reused_container_id) {
            /** @var grid_container $container */
            $container = $storage->loadReuseContainer($reused_container_id);
            $settings=$form_state->getValue('grid_element_trash_container_reused_'.$container->containerid.'_trashed');
            $container_reuse_trash[$container->containerid]=$settings;
        }

        $this->config("grid.trash")
            ->set("trashed_containers",$container_trash)
            ->set("trashed_reuse_containers",$container_reuse_trash)
            ->save();

        parent::submitForm($form, $form_state); // TODO: Change the autogenerated stub
    }


}